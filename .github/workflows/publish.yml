name: Pubish package

on:
  push:
    branches:
      - "*"
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: unit-tests
        run: |
          pip3 install -r requirements.test.txt
          export PYTHONPATH="$PYTHONPATH:./src"
          python3 -m unittest discover -s ./tests -p '*_test.py'
      - name: install-test
        run: |
          pip3 install -e .
          yes | pip3 uninstall utils_esantix
  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: check-changes
        run: |
          echo "Cheking changes on src/ .toml and requirements.txt"
          pkg_changes=$( git diff ${{ github.event.before }} ${{ github.event.after }} --name-only | awk '/^src\// || /^requirements\.txt$/ || /^pyproject\.toml$/' )
          
          echo "Changes files: $pkg_changes"

          if [ -z "$pkg_changes" ]; then
              echo "No package files changed"
              BUILD_PKG='false'
          else
              echo "Detected changes in: $pkg_changes"
              BUILD_PKG='true'
          fi

          echo "BUILD_PKG=${BUILD_PKG}" >> $GITHUB_ENV
      - name: upersion-package
        if: env.BUILD_PKG == 'true'
        run: |
          version_file=src/sutils/__init__.py

          latest=$( git describe --tags --abbrev=0 )
          echo "Latest version $latest"

          major_version=$(echo $latest | cut -d "." -f 1 )
          minor_version=$(echo $latest | cut -d "." -f 2 )

          new_minor_version="$(( $minor_version + 1 ))"

          new_version="$major_version.$new_minor_version"
          echo "BUILD_PKG_VERSION=${new_version}" >> $GITHUB_ENV

          echo "Updating package version to $new_version"
          sed -i "s/__version__ = \".*\"/__version__ = \"$new_version\"/g" $version_file
          BUILD_PKG='true'
      - name: commit-changes
        if: env.BUILD_PKG == 'true'
        run: |
          git config --global user.name 'esantix'
          git config --global user.email 'santiago93echevarria@gmail.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git commit -am "Automated bump"
          git push
      - name: create-elease
        if: env.BUILD_PKG == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.BUILD_PKG_VERSION }}
          release_name: Release ${{ env.BUILD_PKG_VERSION }}
          body: |
            # Install with 
            pip3 install git+ssh://git@github.com/esantix/pip-package-template#egg=utils-esantix=={{ env.BUILD_PKG_VERSION }}
          draft: false
          prerelease: false
