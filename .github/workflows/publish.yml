name: Pubish package

on:
  push:
    branches:
      - "*"
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Unittests
        run: |
          pip3 install -r requirements.test.txt
          export PYTHONPATH="$PYTHONPATH:./src"
          python3 -m unittest discover -s ./tests -p '*_test.py'

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v2
      - name: Check package changes
        run: |
          git fetch --all
          changed_files=$(git diff  ${{ github.event.before }} --name-only | grep 'src/\|pyproject.toml\|requirements.txt')
  
          if [ -z $changed_files ]; then
              echo "No package files changed"
              BUILD_PKG='false'
          else
              echo "Detected changes in: $changed_files"
              BUILD_PKG='true'
          fi

          echo "BUILD_PKG=${IMAGE}" >> $GITHUB_ENV


      - name: Bump minor version
        if: env.BUILD_PKG == 'true'
        run: |
          version_file=src/sutils/__init__.py

          latest=$( curl https://gitlab.com/api/v4/projects/55057510/packages | jq '.[-1].version' | tr -d '"')
          echo "Latest version $latest"

          major_version=$(echo $latest | cut -d "." -f 1 )
          minor_version=$(echo $latest | cut -d "." -f 2 )

          new_minor_version="$(( $minor_version + 1 ))"

          new_version="$major_version.$new_minor_version"

          echo "Updating package version to $new_version"
          sed -i "s/__version__ = \".*\"/__version__ = \"$new_version\"/g" $version_file
          BUILD_PKG='true'

      - name: Build
        if: env.BUILD_PKG == 'true'
        run: |
          python3 -m pip install --upgrade build
          python3 -m build
      - name: Publish
        if: env.BUILD_PKG == 'true'
        env:
          DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
        run: |
          python3 -m pip install --upgrade twine
          python3 -m twine upload -u $DEPLOY_USERNAME -p $DEPLOY_TOKEN --repository-url $REGISTRY_URL dist/*
      - name: Commit and push changes
        if: env.BUILD_PKG == 'true'
        run: |
          git config --global user.name 'esantix'
          git config --global user.email 'santiago93echevarria@gmail.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git commit -am "Automated bump"
          git push
